#include "imports/stdlib.fc";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
}

() recv_external(slice in_msg) impure {
    int op = in_msg~load_uint(32);
    var ds = get_data().begin_parse();
    var (pubkey, time, receiver, seqno) = (ds~load_uint(256), ds~load_uint(32), ds~load_msg_addr(), ds~load_uint(32));

    if(op == 0x9df10277){
        var (qid, sign, ref) = (in_msg~load_uint(64), in_msg~load_bits(512), in_msg~load_ref());
        ds = ref.begin_parse();
        var (lock, seqno') = (ds~load_uint(32), ds~load_uint(32));

        throw_unless(119, seqno' == seqno + 1);
        throw_unless(120, check_signature(cell_hash(ref), sign, pubkey));
        throw_if(121, lock <= 0);
        throw_if(122, time < now());
        throw_if(123, now() + lock < time);

        set_data(
            begin_cell()
            .store_uint(pubkey, 256)
            .store_uint(now() + lock, 32)
            .store_slice(receiver)
            .store_uint(seqno', 32)
            .end_cell()
        );
    }
    elseif(op == 0xbb4be234) {
        var qid = in_msg~load_uint(64);
        throw_if(124, now() < time);

        cell msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(receiver)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .end_cell();
        send_raw_message(msg, 128);
    }
}

int get_seqno() method_id {
    var ds = get_data().begin_parse();
    var (pubkey, time, receiver, seqno) = (ds~load_uint(256), ds~load_uint(32), ds~load_msg_addr(), ds~load_uint(32));
    return seqno;
}

int get_execution_time() method_id {
    var ds = get_data().begin_parse();
    var (pubkey, time) = (ds~load_uint(256), ds~load_uint(32));
    return time;
}