#include "imports/stdlib.fc";
() code(slice in_msg) impure asm
"""
32 LDU
c4 PUSH
CTOS
256 LDU
32 LDU
LDMSGADDR
32 LDU

s6 PUSH
2649817719 PUSHINT
EQUAL
// op in_msg pubkey time receiver seqno {}
IFJMP:<{
    s5 PUSH
    64 LDU
    LDREF

    // op in_msg pubkey time receiver seqno {} qid ref sign
    SWAP
    DUP 
    HASHCU
    SWAP
    CTOS
    32 LDU
    32 LDU

    // op in_msg pubkey time receiver seqno {} qid sign hash lock seqno' {}
    DROP
    s6 s6 XCPU 
    DEC
    EQUAL
    119 THROWIFNOT

    // op in_msg pubkey time receiver seqno' {} qid sign hash lock 
    s1 s2 s8 PUSH3
    CHKSIGNU
    120 THROWIFNOT

    s7 s0 PUSH2
    1 LESSINT
    121 THROWIF

    NOW
    LESS
    122 THROWIF
    
    NOW
    ADD
    s0 s7 PUSH2
    LESS
    123 THROWIF

    ACCEPT

    s5 s6 PUSH2
    s2 s10 PUSH2

    // op in_msg pubkey time receiver seqno' {} qid sign hash lock+now seqno' receiver lock+now pubkey
    NEWC
    256 STU
    32 STU
    STSLICE
    32 STU
    ENDC
    c4 POP

    11 BLKDROP
    
}>
s6 PUSH
3142312500 PUSHINT
EQUAL
IFJMP:<{
    DUMPSTK
    s3 PUSH
    NOW
    GREATER
    124 THROWIF
    ACCEPT

    0 PUSHINT
    s3 PUSH
    24 PUSHINT

    NEWC
    6 STU
    STSLICE
    111 STU
    ENDC
    7 PUSHPOW2
    SENDRAWMSG

    7 BLKDROP
}>
7 BLKDROP
""";
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
}

() recv_external(slice in_msg) impure {
    code(in_msg);
}

int get_seqno() method_id {
    var ds = get_data().begin_parse();
    ds~skip_bits(256 + 32 + 267);

    return ds~load_uint(32);
}

int get_execution_time() method_id {
    var ds = get_data().begin_parse();
    ds~skip_bits(256);

    return ds~load_uint(32);
}