#include "imports/stdlib.fc";

cell get_storage() inline {
    slice cs = get_data().begin_parse();
    return cs~load_ref();
}

int version() method_id {
    var ds = get_data().begin_parse();
    return ds~load_uint(32);
}

() recv_internal(int msg_value, int balance, cell in_msg_full, slice in_msg_body) impure {
    int xpVersion = in_msg_body~load_uint(32); 

    ;; version_id:uint32 contractStorage:^Cell = wrapperStorage
    if(xpVersion == 0){
        set_data( 
            begin_cell()
            .store_uint(1, 32)
            .store_ref(get_data())
        .end_cell());
        return ();
    }

    cell xpCode = in_msg_body~load_maybe_ref();
    cell migrations = in_msg_body~load_dict(); 
    cell payload = in_msg_body~load_ref();

    slice ds = get_data().begin_parse();
    int version = ds~load_uint(32);
    cell storage = ds~load_ref();

    ;; Check for updates
    int update_needed = version < xpVersion;
    if(update_needed){
        throw_if(200, xpCode.cell_null?()); 
        while(version < xpVersion) {
            (slice vs, int f) = migrations.udict_get?(32, version);
            throw_unless(400, f);
            version = vs~load_uint(32);
            cell update_code = vs~load_maybe_ref();
            if(~ update_code.cell_null?()){
                set_c3(update_code.begin_parse().bless());
                storage = migrate_one(storage);
            }
        }
        set_c3(xpCode.begin_parse().bless());
        set_code(xpCode);
    }

    storage = process_message(storage, msg_value, balance, in_msg_full, payload.begin_parse());
    set_data( 
        begin_cell()
        .store_uint(version, 32)
        .store_ref(storage)
    .end_cell());    
}



;; <<<<< Custom version-specific code begins
cell process_message(cell storage, int msg_value, int balance, cell in_msg_full, slice payload){
    return null();
}
cell migrate_one(cell storage){
    return null();
}
;; Custom version-specific code ends >>>>>