#include "imports/stdlib.fc";

cell get_storage() inline {
    slice cs = get_data().begin_parse();
    return cs~load_ref();
}

cell wrap_storage(int version_id, cell storage) inline {
    return begin_cell()
        .store_uint(version_id, 32)
        .store_ref(storage)
    .end_cell();
}

int version() method_id {
    var ds = get_data().begin_parse();
    return ds~load_uint(32);
}

() recv_internal(int msg_value, int balance, cell in_msg_full, slice in_msg_body) impure {
    int xpVersion = in_msg_body~load_uint(32); 

    ;; version_id:uint32 contractStorage:^Cell = wrapperStorage
    if(xpVersion == 0){
        set_data( wrap_storage(1, get_data()) );
        return ();
    }

    cell xpCode = in_msg_body~load_maybe_ref();
    cell migrations = in_msg_body~load_dict(); 
    cell payload = in_msg_body~load_ref();

    slice ds = get_data().begin_parse();
    int version = ds~load_uint(32);
    cell storage = ds~load_ref();

    ;; Check for updates
    int update_needed = version < xpVersion;
    if(~ update_needed){
        storage = process_message(storage, msg_value, balance, in_msg_full, payload.begin_parse());
        set_data(wrap_storage(version, storage));
        return ();
    }

    throw_if(200, xpCode.cell_null?()); 
    while(version < xpVersion) {
        (slice vs, int f) = migrations.udict_get?(32, version);
        throw_unless(400, f);
        version = vs~load_uint(32);
        cell update_code = vs~load_maybe_ref();
        if(~ update_code.cell_null?()){
            set_c3(update_code.begin_parse().bless());
            storage = migrate_one(storage);
        }
    }
    set_c3(xpCode.begin_parse().bless());
    set_code(xpCode);
    
    storage = process_message(storage, msg_value, balance, in_msg_full, payload.begin_parse());
    set_data(wrap_storage(version, storage));
}



;; <<<<< Custom version-specific code begins
;; This section (everything between << and >> characters) will be fully substituted for each version.
;; This is an IMPORTANT part, and these exact lines with <<<<< and >>>>> must be present in your code for the testing system to work correctly.
;; All the code provided here serves as an example of the version-code, which your update code must be compatible with.
;; Refer to the "3-example" directory for more version examples.

;; from counter-v0.fc
cell process_message(cell storage, int msg_value, int balance, cell in_msg_full, slice in_msg_body) impure {
    slice cs = storage.begin_parse();
    int current_amount = cs.preload_uint(32);
    return begin_cell().store_uint(current_amount + 1, 32).end_cell();
}

cell migrate_one(cell old_storage) { ;; it's just a placeholder that is required for correct compilation
    return old_storage;
}

;; Custom version-specific code ends >>>>>