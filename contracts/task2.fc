#include "imports/stdlib.fc";

;; add_user#368ddef3 query_id:uint64 address:MsgAddressInt share:uint32 = InternalMsgBody;
;; remove_user#278205c8 query_id:uint64 address:MsgAddressInt = InternalMsgBody;
;; split_ton#068530b3 query_id:uint64 = InternalMsgBody;
;; transfer_notification#7362d09c query_id:uint64 amount:Coins = InternalMsgBody;
builder store_addr(builder b, int address) inline {
    return b.store_uint(1024, 11).store_uint(address, 256);
}

() recv_internal(int msg_value, cell in_msg_cell, slice msg) impure {
    if (msg.slice_bits() < 32) {
        return ();
    }
    var cs = in_msg_cell.begin_parse().skip_bits(4);
    var sender = cs~load_msg_addr();

    var ds = get_data().begin_parse();
    slice admin = ds~load_msg_addr();
    cell users = ds~load_dict();

    int op = msg~load_uint(32);
    int qid = msg~load_uint(64);
    if(op == 0x368ddef3){
        accept_message();
        slice address = msg~load_msg_addr();
        (_, int addr) = address.parse_std_addr();
        
        throw_if(120, sender.slice_hash() != admin.slice_hash());

        int share = msg~load_uint(32);
        users~udict_set(256, addr, begin_cell().store_uint(share, 32).end_cell().begin_parse());

        set_data(
            begin_cell()
            .store_slice(admin)
            .store_dict(users)
            .end_cell()
        );
    }
    elseif(op == 0x278205c8){
        accept_message();
        slice address = msg~load_msg_addr();
        (_, int addr) = address.parse_std_addr();

        throw_if(120, sender.slice_hash() != admin.slice_hash());

        int f = users~udict_delete?(256, addr);
        throw_unless(121, f);

        set_data(
            begin_cell()
            .store_slice(admin)
            .store_dict(users)
            .end_cell()
        );
    }
    elseif(op == 0x068530b3){
        accept_message();

        (int user, slice sliceS, int f) = users.udict_get_next?(256, 0);
        throw_unless(122, f);

        int total_share = 0;
        while(f){
            int share = sliceS~load_uint(32);
            total_share += share;
            (user, sliceS, f) = users.udict_get_next?(256, user);
        }

        (int user, slice sliceS, int f) = users.udict_get_next?(256, 0);
        builder head = begin_cell()
                .store_uint(0x18, 6);

        while(f){
            int share = sliceS~load_uint(32);
            cell msg = head
                .store_addr(user)
                .store_coins(muldiv(share, msg_value, total_share))
                .store_uint(0, 107)
                .end_cell();
            send_raw_message(msg, 1);
            (user, sliceS, f) = users.udict_get_next?(256, user);
        }
    }
    elseif(op == 0x7362d09c){
        accept_message();
        int amount = msg~load_coins();

        (int user, slice sliceS, int f) = users.udict_get_next?(256, 0);
        throw_unless(122, f);

        int total_share = 0;
        while(f){
            int share = sliceS~load_uint(32);
            total_share += share;
            (user, sliceS, f) = users.udict_get_next?(256, user);
        }

        (int user, slice sliceS, int f) = users.udict_get_next?(256, 0);
        builder bodyHead = begin_cell()
            .store_uint(0x0f8a7ea5, 32)
            .store_uint(qid, 64);
        builder msgHead = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(sender)
            .store_coins(20000000)
            .store_uint(1, 107);
                
        while(f){
            int share = sliceS~load_uint(32);
            cell body = bodyHead
                .store_coins(muldiv(share, amount, total_share))
                .store_addr(user)
                .store_addr(user)
                .store_uint(514, 14) ;; no custom payload
            .end_cell();

            cell msg = msgHead.store_ref(body).end_cell();
            send_raw_message(msg, 0);
            
            (user, sliceS, f) = users.udict_get_next?(256, user);
        }
    }
}

cell get_users() method_id {
    var ds = get_data().begin_parse();
    slice admin = ds~load_msg_addr();
    cell users = ds~load_dict();
    return users;
}

int get_user_share(slice address) method_id {
    var ds = get_data().begin_parse();
    slice admin = ds~load_msg_addr();
    cell users = ds~load_dict();
    
    (_, int addr) = address.parse_std_addr();
    (slice sliceS, _) = users.udict_get?(256, addr);
    
    return sliceS~load_uint(32);
}

